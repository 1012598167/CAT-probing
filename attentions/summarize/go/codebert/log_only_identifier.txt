06/25/2022 03:00:05 - WARNING - configs -   Process rank: -1, device: cuda, n_gpu: 1, distributed training: False, cpu count: 48
06/25/2022 03:00:05 - INFO - __main__ -   Namespace(adam_epsilon=1e-08, add_lang_ids=False, add_task_prefix=False, always_save_model=True, attention_batch_size=100, batch_size=48, beam_size=10, cache_path='save_models/summarize/go/codebert/cache_data', cpu_count=48, data_dir='/data/pretrain-attention/CodeAttention/data', data_num=-1, device=device(type='cuda'), do_eval=True, do_eval_bleu=True, do_test=True, do_train=True, frequent_type=False, gpu=0, gradient_accumulation_steps=1, layer_num=-1, local_rank=-1, lr=5e-05, max_grad_norm=1.0, max_source_length=256, max_target_length=128, model_dir='saved_models', model_name='codebert', n_gpu=1, no_cuda=False, num_train_epochs=15, output_dir='save_models/summarize/go/codebert', patience=2, pickle_suffix='_at_ua.pickle', quantile_threshold=0.75, res_dir='results/summarize/go/codebert', res_fn='results/summarize/go/codebert.txt', save_last_checkpoints=True, seed=1234, start_epoch=0, sub_task='go', summary_dir='tensorboard', task='summarize', upgraded_ast=True, warmup_steps=1000, weight_decay=0.0)
06/25/2022 03:00:07 - INFO - models -   Finish loading model [173M] parameters from codebert
frequent_type or not: False
upgraded_ast or not: True
06/25/2022 03:00:22 - INFO - utils -   Read 3000 examples, avg src len: 88, avg trg len: 15, max src len: 509, max trg len: 157
06/25/2022 03:00:22 - INFO - utils -   Sample 5k data for computing bleu/attention from /data/pretrain-attention/CodeAttention/data/summarize/go/train.jsonl
  0%|          | 0/3000 [00:00<?, ?it/s]  1%|1         | 32/3000 [00:00<00:11, 266.58it/s]  3%|2         | 80/3000 [00:00<00:08, 357.19it/s]  4%|4         | 128/3000 [00:00<00:07, 396.42it/s]  6%|5         | 176/3000 [00:00<00:06, 413.81it/s]  7%|7         | 224/3000 [00:00<00:06, 423.94it/s]  9%|9         | 272/3000 [00:00<00:06, 429.21it/s] 11%|#         | 320/3000 [00:00<00:06, 432.59it/s] 12%|#2        | 368/3000 [00:00<00:05, 438.83it/s] 14%|#4        | 432/3000 [00:01<00:05, 462.33it/s] 17%|#6        | 496/3000 [00:01<00:05, 479.43it/s] 19%|#8        | 560/3000 [00:01<00:05, 487.16it/s] 21%|##        | 624/3000 [00:01<00:04, 491.27it/s] 23%|##2       | 688/3000 [00:01<00:04, 495.47it/s] 25%|##5       | 752/3000 [00:01<00:04, 498.90it/s] 27%|##7       | 816/3000 [00:01<00:04, 506.09it/s] 29%|##9       | 880/3000 [00:01<00:04, 513.52it/s] 31%|###1      | 944/3000 [00:02<00:03, 523.11it/s] 34%|###3      | 1008/3000 [00:02<00:03, 529.05it/s] 36%|###5      | 1072/3000 [00:02<00:03, 536.54it/s] 38%|###7      | 1136/3000 [00:02<00:03, 535.44it/s] 40%|####      | 1200/3000 [00:02<00:03, 534.16it/s] 42%|####2     | 1264/3000 [00:02<00:03, 534.49it/s] 44%|####4     | 1328/3000 [00:02<00:03, 535.03it/s] 46%|####6     | 1392/3000 [00:02<00:03, 532.06it/s] 49%|####8     | 1456/3000 [00:02<00:02, 520.88it/s] 51%|#####     | 1520/3000 [00:03<00:02, 515.52it/s] 53%|#####2    | 1584/3000 [00:03<00:02, 517.23it/s] 55%|#####4    | 1648/3000 [00:03<00:02, 509.22it/s] 57%|#####6    | 1699/3000 [00:03<00:02, 478.08it/s] 58%|#####8    | 1747/3000 [00:03<00:02, 427.15it/s] 60%|######    | 1808/3000 [00:03<00:02, 443.77it/s] 62%|######2   | 1872/3000 [00:03<00:02, 464.96it/s] 65%|######4   | 1936/3000 [00:03<00:02, 483.60it/s] 66%|######6   | 1985/3000 [00:04<00:02, 434.38it/s] 68%|######7   | 2032/3000 [00:04<00:02, 435.49it/s] 69%|######9   | 2080/3000 [00:04<00:02, 432.95it/s] 71%|#######   | 2128/3000 [00:04<00:02, 435.63it/s] 73%|#######2  | 2176/3000 [00:04<00:01, 437.79it/s] 74%|#######4  | 2224/3000 [00:04<00:01, 438.78it/s] 76%|#######5  | 2272/3000 [00:04<00:01, 433.15it/s] 78%|#######7  | 2336/3000 [00:04<00:01, 443.35it/s] 80%|########  | 2400/3000 [00:05<00:01, 463.88it/s] 82%|########2 | 2464/3000 [00:05<00:01, 477.27it/s] 84%|########4 | 2528/3000 [00:05<00:00, 493.09it/s] 86%|########6 | 2592/3000 [00:05<00:00, 503.88it/s] 89%|########8 | 2656/3000 [00:05<00:00, 508.48it/s] 91%|######### | 2720/3000 [00:05<00:00, 514.94it/s] 92%|#########2| 2772/3000 [00:05<00:00, 503.90it/s] 94%|#########4| 2832/3000 [00:05<00:00, 512.75it/s] 97%|#########6| 2896/3000 [00:06<00:00, 518.30it/s] 99%|#########8| 2960/3000 [00:06<00:00, 516.14it/s]100%|##########| 3000/3000 [00:06<00:00, 484.13it/s]
06/25/2022 03:00:29 - INFO - __main__ -   Parse AST trees and obtain leaf tokens
Getting ast and token:   0%|          | 0/3000 [00:00<?, ?it/s]leaf:  2 start:  (0, 0) , end:  (0, 4) , token:  func type:  func
leaf:  3 start:  (0, 5) , end:  (0, 19) , token:  DurationString type:  identifier
leaf:  5 start:  (0, 19) , end:  (0, 20) , token:  ( type:  (
leaf:  7 start:  (0, 20) , end:  (0, 21) , token:  d type:  identifier
leaf:  9 start:  (0, 22) , end:  (0, 26) , token:  time type:  package_identifier
leaf:  10 start:  (0, 26) , end:  (0, 27) , token:  . type:  .
leaf:  11 start:  (0, 27) , end:  (0, 35) , token:  Duration type:  type_identifier
leaf:  12 start:  (0, 35) , end:  (0, 36) , token:  ) type:  )
leaf:  13 start:  (0, 37) , end:  (0, 43) , token:  string type:  type_identifier
leaf:  15 start:  (0, 44) , end:  (0, 45) , token:  { type:  {
leaf:  18 start:  (1, 1) , end:  (1, 5) , token:  sign type:  identifier
leaf:  19 start:  (1, 6) , end:  (1, 8) , token:  := type:  :=
leaf:  21 start:  (1, 9) , end:  (1, 10) , token:  1 type:  int_literal
leaf:  22 start:  (1, 10) , end:  (2, 0) , token:   type:  

leaf:  24 start:  (2, 1) , end:  (2, 3) , token:  if type:  if
leaf:  26 start:  (2, 4) , end:  (2, 5) , token:  d type:  identifier
leaf:  27 start:  (2, 6) , end:  (2, 7) , token:  < type:  <
leaf:  28 start:  (2, 8) , end:  (2, 9) , token:  0 type:  int_literal
leaf:  30 start:  (2, 10) , end:  (2, 11) , token:  { type:  {
leaf:  33 start:  (3, 2) , end:  (3, 6) , token:  sign type:  identifier
leaf:  34 start:  (3, 7) , end:  (3, 8) , token:  = type:  =
leaf:  37 start:  (3, 9) , end:  (3, 10) , token:  - type:  -
leaf:  38 start:  (3, 10) , end:  (3, 11) , token:  1 type:  int_literal
leaf:  39 start:  (3, 11) , end:  (4, 0) , token:   type:  

leaf:  42 start:  (4, 2) , end:  (4, 3) , token:  d type:  identifier
leaf:  43 start:  (4, 4) , end:  (4, 5) , token:  = type:  =
leaf:  46 start:  (4, 6) , end:  (4, 7) , token:  - type:  -
leaf:  47 start:  (4, 7) , end:  (4, 8) , token:  d type:  identifier
leaf:  48 start:  (4, 8) , end:  (5, 0) , token:   type:  

leaf:  49 start:  (5, 1) , end:  (5, 2) , token:  } type:  }
leaf:  50 start:  (5, 2) , end:  (6, 0) , token:   type:  

leaf:  53 start:  (6, 1) , end:  (6, 3) , token:  ns type:  identifier
leaf:  54 start:  (6, 4) , end:  (6, 6) , token:  := type:  :=
leaf:  57 start:  (6, 7) , end:  (6, 10) , token:  int type:  identifier
leaf:  59 start:  (6, 10) , end:  (6, 11) , token:  ( type:  (
leaf:  61 start:  (6, 11) , end:  (6, 12) , token:  d type:  identifier
leaf:  62 start:  (6, 13) , end:  (6, 14) , token:  % type:  %
leaf:  63 start:  (6, 15) , end:  (6, 18) , token:  1e9 type:  float_literal
leaf:  64 start:  (6, 18) , end:  (6, 19) , token:  ) type:  )
leaf:  65 start:  (6, 19) , end:  (7, 0) , token:   type:  

leaf:  68 start:  (7, 1) , end:  (7, 2) , token:  d type:  identifier
leaf:  69 start:  (7, 3) , end:  (7, 5) , token:  /= type:  /=
leaf:  71 start:  (7, 6) , end:  (7, 9) , token:  1e9 type:  float_literal
leaf:  72 start:  (7, 9) , end:  (8, 0) , token:   type:  

leaf:  75 start:  (8, 1) , end:  (8, 4) , token:  sec type:  identifier
leaf:  76 start:  (8, 5) , end:  (8, 7) , token:  := type:  :=
leaf:  79 start:  (8, 8) , end:  (8, 11) , token:  int type:  identifier
leaf:  81 start:  (8, 11) , end:  (8, 12) , token:  ( type:  (
leaf:  83 start:  (8, 12) , end:  (8, 13) , token:  d type:  identifier
leaf:  84 start:  (8, 14) , end:  (8, 15) , token:  % type:  %
leaf:  85 start:  (8, 16) , end:  (8, 18) , token:  60 type:  int_literal
leaf:  86 start:  (8, 18) , end:  (8, 19) , token:  ) type:  )
leaf:  87 start:  (8, 19) , end:  (9, 0) , token:   type:  

leaf:  90 start:  (9, 1) , end:  (9, 2) , token:  d type:  identifier
leaf:  91 start:  (9, 3) , end:  (9, 5) , token:  /= type:  /=
leaf:  93 start:  (9, 6) , end:  (9, 8) , token:  60 type:  int_literal
leaf:  94 start:  (9, 8) , end:  (10, 0) , token:   type:  

leaf:  97 start:  (10, 1) , end:  (10, 4) , token:  min type:  identifier
leaf:  98 start:  (10, 5) , end:  (10, 7) , token:  := type:  :=
leaf:  101 start:  (10, 8) , end:  (10, 11) , token:  int type:  identifier
leaf:  103 start:  (10, 11) , end:  (10, 12) , token:  ( type:  (
leaf:  105 start:  (10, 12) , end:  (10, 13) , token:  d type:  identifier
leaf:  106 start:  (10, 14) , end:  (10, 15) , token:  % type:  %
leaf:  107 start:  (10, 16) , end:  (10, 18) , token:  60 type:  int_literal
leaf:  108 start:  (10, 18) , end:  (10, 19) , token:  ) type:  )
leaf:  109 start:  (10, 19) , end:  (11, 0) , token:   type:  

leaf:  112 start:  (11, 1) , end:  (11, 5) , token:  hour type:  identifier
leaf:  113 start:  (11, 6) , end:  (11, 8) , token:  := type:  :=
leaf:  117 start:  (11, 9) , end:  (11, 12) , token:  int type:  identifier
leaf:  119 start:  (11, 12) , end:  (11, 13) , token:  ( type:  (
leaf:  121 start:  (11, 13) , end:  (11, 14) , token:  d type:  identifier
leaf:  122 start:  (11, 14) , end:  (11, 15) , token:  / type:  /
leaf:  123 start:  (11, 15) , end:  (11, 17) , token:  60 type:  int_literal
leaf:  124 start:  (11, 17) , end:  (11, 18) , token:  ) type:  )
leaf:  125 start:  (11, 19) , end:  (11, 20) , token:  * type:  *
leaf:  126 start:  (11, 21) , end:  (11, 25) , token:  sign type:  identifier
leaf:  127 start:  (11, 25) , end:  (12, 0) , token:   type:  

leaf:  129 start:  (12, 1) , end:  (12, 3) , token:  if type:  if
leaf:  131 start:  (12, 4) , end:  (12, 6) , token:  ns type:  identifier
leaf:  132 start:  (12, 7) , end:  (12, 9) , token:  == type:  ==
leaf:  133 start:  (12, 10) , end:  (12, 11) , token:  0 type:  int_literal
leaf:  135 start:  (12, 12) , end:  (12, 13) , token:  { type:  {
leaf:  137 start:  (13, 2) , end:  (13, 8) , token:  return type:  return
leaf:  141 start:  (13, 9) , end:  (13, 12) , token:  fmt type:  identifier
leaf:  142 start:  (13, 12) , end:  (13, 13) , token:  . type:  .
leaf:  143 start:  (13, 13) , end:  (13, 20) , token:  Sprintf type:  field_identifier
leaf:  145 start:  (13, 20) , end:  (13, 21) , token:  ( type:  (
leaf:  147 start:  (13, 21) , end:  (13, 22) , token:  " type:  "
leaf:  148 start:  (13, 34) , end:  (13, 35) , token:  " type:  "
leaf:  149 start:  (13, 35) , end:  (13, 36) , token:  , type:  ,
leaf:  150 start:  (13, 37) , end:  (13, 41) , token:  hour type:  identifier
leaf:  151 start:  (13, 41) , end:  (13, 42) , token:  , type:  ,
leaf:  152 start:  (13, 43) , end:  (13, 46) , token:  min type:  identifier
leaf:  153 start:  (13, 46) , end:  (13, 47) , token:  , type:  ,
leaf:  154 start:  (13, 48) , end:  (13, 51) , token:  sec type:  identifier
leaf:  155 start:  (13, 51) , end:  (13, 52) , token:  ) type:  )
leaf:  156 start:  (13, 52) , end:  (14, 0) , token:   type:  

leaf:  157 start:  (14, 1) , end:  (14, 2) , token:  } type:  }
leaf:  158 start:  (14, 2) , end:  (15, 0) , token:   type:  

leaf:  160 start:  (15, 1) , end:  (15, 7) , token:  return type:  return
leaf:  164 start:  (15, 8) , end:  (15, 11) , token:  fmt type:  identifier
leaf:  165 start:  (15, 11) , end:  (15, 12) , token:  . type:  .
leaf:  166 start:  (15, 12) , end:  (15, 19) , token:  Sprintf type:  field_identifier
leaf:  168 start:  (15, 19) , end:  (15, 20) , token:  ( type:  (
leaf:  170 start:  (15, 20) , end:  (15, 21) , token:  " type:  "
leaf:  171 start:  (15, 38) , end:  (15, 39) , token:  " type:  "
leaf:  172 start:  (15, 39) , end:  (15, 40) , token:  , type:  ,
leaf:  173 start:  (15, 41) , end:  (15, 45) , token:  hour type:  identifier
leaf:  174 start:  (15, 45) , end:  (15, 46) , token:  , type:  ,
leaf:  175 start:  (15, 47) , end:  (15, 50) , token:  min type:  identifier
leaf:  176 start:  (15, 50) , end:  (15, 51) , token:  , type:  ,
leaf:  177 start:  (15, 52) , end:  (15, 55) , token:  sec type:  identifier
leaf:  178 start:  (15, 55) , end:  (15, 56) , token:  , type:  ,
leaf:  179 start:  (15, 57) , end:  (15, 59) , token:  ns type:  identifier
leaf:  180 start:  (15, 59) , end:  (15, 60) , token:  ) type:  )
leaf:  181 start:  (15, 60) , end:  (16, 0) , token:   type:  

leaf:  182 start:  (16, 0) , end:  (16, 1) , token:  } type:  }
##########0
0 th code of T:
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182]
[(0, 1), (1, 2), (1, 3), (1, 4), (1, 13), (1, 14), (4, 5), (4, 6), (4, 12), (6, 7), (6, 8), (8, 9), (8, 10), (8, 11), (14, 15), (14, 16), (14, 22), (14, 23), (14, 50), (14, 51), (14, 65), (14, 66), (14, 72), (14, 73), (14, 87), (14, 88), (14, 94), (14, 95), (14, 109), (14, 110), (14, 127), (14, 128), (14, 158), (14, 159), (14, 181), (14, 182), (16, 17), (16, 19), (16, 20), (17, 18), (20, 21), (23, 24), (23, 25), (23, 29), (25, 26), (25, 27), (25, 28), (29, 30), (29, 31), (29, 39), (29, 40), (29, 48), (29, 49), (31, 32), (31, 34), (31, 35), (32, 33), (35, 36), (36, 37), (36, 38), (40, 41), (40, 43), (40, 44), (41, 42), (44, 45), (45, 46), (45, 47), (51, 52), (51, 54), (51, 55), (52, 53), (55, 56), (56, 57), (56, 58), (58, 59), (58, 60), (58, 64), (60, 61), (60, 62), (60, 63), (66, 67), (66, 69), (66, 70), (67, 68), (70, 71), (73, 74), (73, 76), (73, 77), (74, 75), (77, 78), (78, 79), (78, 80), (80, 81), (80, 82), (80, 86), (82, 83), (82, 84), (82, 85), (88, 89), (88, 91), (88, 92), (89, 90), (92, 93), (95, 96), (95, 98), (95, 99), (96, 97), (99, 100), (100, 101), (100, 102), (102, 103), (102, 104), (102, 108), (104, 105), (104, 106), (104, 107), (110, 111), (110, 113), (110, 114), (111, 112), (114, 115), (115, 116), (115, 125), (115, 126), (116, 117), (116, 118), (118, 119), (118, 120), (118, 124), (120, 121), (120, 122), (120, 123), (128, 129), (128, 130), (128, 134), (130, 131), (130, 132), (130, 133), (134, 135), (134, 136), (134, 156), (134, 157), (136, 137), (136, 138), (138, 139), (139, 140), (139, 144), (140, 141), (140, 142), (140, 143), (144, 145), (144, 146), (144, 149), (144, 150), (144, 151), (144, 152), (144, 153), (144, 154), (144, 155), (146, 147), (146, 148), (159, 160), (159, 161), (161, 162), (162, 163), (162, 167), (163, 164), (163, 165), (163, 166), (167, 168), (167, 169), (167, 172), (167, 173), (167, 174), (167, 175), (167, 176), (167, 177), (167, 178), (167, 179), (167, 180), (169, 170), (169, 171)]
0 th code of sast T:
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182]
[(0, 1), (1, 2), (1, 3), (1, 4), (1, 13), (1, 14), (2, 3), (3, 5), (4, 5), (4, 6), (4, 12), (5, 7), (6, 7), (6, 8), (7, 9), (7, 26), (8, 9), (8, 10), (8, 11), (9, 10), (10, 11), (11, 12), (12, 13), (13, 15), (14, 15), (14, 16), (14, 22), (14, 23), (14, 50), (14, 51), (14, 65), (14, 66), (14, 72), (14, 73), (14, 87), (14, 88), (14, 94), (14, 95), (14, 109), (14, 110), (14, 127), (14, 128), (14, 158), (14, 159), (14, 181), (14, 182), (15, 18), (16, 17), (16, 19), (16, 20), (17, 18), (18, 19), (18, 33), (19, 21), (20, 21), (21, 22), (22, 24), (23, 24), (23, 25), (23, 29), (24, 26), (25, 26), (25, 27), (25, 28), (26, 27), (26, 42), (27, 28), (28, 30), (29, 30), (29, 31), (29, 39), (29, 40), (29, 48), (29, 49), (30, 33), (31, 32), (31, 34), (31, 35), (32, 33), (33, 34), (33, 126), (34, 37), (35, 36), (36, 37), (36, 38), (37, 38), (38, 39), (39, 42), (40, 41), (40, 43), (40, 44), (41, 42), (42, 43), (42, 47), (43, 46), (44, 45), (45, 46), (45, 47), (46, 47), (47, 48), (47, 61), (48, 49), (49, 50), (50, 53), (51, 52), (51, 54), (51, 55), (52, 53), (53, 54), (53, 131), (54, 57), (55, 56), (56, 57), (56, 58), (57, 59), (57, 79), (58, 59), (58, 60), (58, 64), (59, 61), (60, 61), (60, 62), (60, 63), (61, 62), (61, 68), (62, 63), (63, 64), (64, 65), (65, 68), (66, 67), (66, 69), (66, 70), (67, 68), (68, 69), (68, 83), (69, 71), (70, 71), (71, 72), (72, 75), (73, 74), (73, 76), (73, 77), (74, 75), (75, 76), (75, 154), (76, 79), (77, 78), (78, 79), (78, 80), (79, 81), (79, 101), (80, 81), (80, 82), (80, 86), (81, 83), (82, 83), (82, 84), (82, 85), (83, 84), (83, 90), (84, 85), (85, 86), (86, 87), (87, 90), (88, 89), (88, 91), (88, 92), (89, 90), (90, 91), (90, 105), (91, 93), (92, 93), (93, 94), (94, 97), (95, 96), (95, 98), (95, 99), (96, 97), (97, 98), (97, 152), (98, 101), (99, 100), (100, 101), (100, 102), (101, 103), (101, 117), (102, 103), (102, 104), (102, 108), (103, 105), (104, 105), (104, 106), (104, 107), (105, 106), (105, 121), (106, 107), (107, 108), (108, 109), (109, 112), (110, 111), (110, 113), (110, 114), (111, 112), (112, 113), (112, 150), (113, 117), (114, 115), (115, 116), (115, 125), (115, 126), (116, 117), (116, 118), (117, 119), (118, 119), (118, 120), (118, 124), (119, 121), (120, 121), (120, 122), (120, 123), (121, 122), (122, 123), (123, 124), (124, 125), (125, 126), (126, 127), (127, 129), (128, 129), (128, 130), (128, 134), (129, 131), (130, 131), (130, 132), (130, 133), (131, 132), (131, 179), (132, 133), (133, 135), (134, 135), (134, 136), (134, 156), (134, 157), (135, 137), (136, 137), (136, 138), (137, 141), (138, 139), (139, 140), (139, 144), (140, 141), (140, 142), (140, 143), (141, 142), (141, 164), (142, 143), (143, 145), (144, 145), (144, 146), (144, 149), (144, 150), (144, 151), (144, 152), (144, 153), (144, 154), (144, 155), (145, 147), (146, 147), (146, 148), (147, 148), (148, 149), (149, 150), (150, 151), (150, 173), (151, 152), (152, 153), (152, 175), (153, 154), (154, 155), (154, 177), (155, 156), (156, 157), (157, 158), (158, 160), (159, 160), (159, 161), (160, 164), (161, 162), (162, 163), (162, 167), (163, 164), (163, 165), (163, 166), (164, 165), (165, 166), (166, 168), (167, 168), (167, 169), (167, 172), (167, 173), (167, 174), (167, 175), (167, 176), (167, 177), (167, 178), (167, 179), (167, 180), (168, 170), (169, 170), (169, 171), (170, 171), (171, 172), (172, 173), (173, 174), (174, 175), (175, 176), (176, 177), (177, 178), (178, 179), (179, 180), (180, 181), (181, 182)]
raw_code:  func DurationString(d time.Duration) string {
	sign := 1
	if d < 0 {
		sign = -1
		d = -d
	}
	ns := int(d % 1e9)
	d /= 1e9
	sec := int(d % 60)
	d /= 60
	min := int(d % 60)
	hour := int(d/60) * sign
	if ns == 0 {
		return fmt.Sprintf("%d:%02d:%02d", hour, min, sec)
	}
	return fmt.Sprintf("%d:%02d:%02d.%09d", hour, min, sec, ns)
}
leaves:  Getting ast and token:   1%|          | 26/3000 [00:00<00:12, 240.72it/s]Getting ast and token:   2%|1         | 54/3000 [00:00<00:11, 259.92it/s]Getting ast and token:   3%|2         | 81/3000 [00:00<00:14, 205.28it/s]Getting ast and token:   4%|3         | 114/3000 [00:00<00:11, 243.91it/s]Getting ast and token:   5%|5         | 150/3000 [00:00<00:10, 278.82it/s]Getting ast and token:   6%|6         | 180/3000 [00:00<00:12, 226.43it/s]Getting ast and token:   7%|7         | 212/3000 [00:00<00:11, 250.82it/s]Getting ast and token:   8%|8         | 243/3000 [00:00<00:10, 266.00it/s]Getting ast and token:   9%|9         | 272/3000 [00:01<00:11, 237.66it/s]Getting ast and token:  10%|#         | 303/3000 [00:01<00:10, 255.62it/s]Getting ast and token:  11%|#1        | 334/3000 [00:01<00:09, 268.36it/s]Getting ast and token:  12%|#2        | 362/3000 [00:01<00:09, 266.57it/s]Getting ast and token:  13%|#3        | 390/3000 [00:01<00:11, 223.49it/s]Getting ast and token:  14%|#4        | 425/3000 [00:01<00:10, 253.95it/s]Getting ast and token:  15%|#5        | 459/3000 [00:01<00:09, 275.50it/s]Getting ast and token:  16%|#6        | 489/3000 [00:01<00:09, 258.66it/s]Getting ast and token:  17%|#7        | 517/3000 [00:02<00:12, 206.40it/s]Getting ast and token:  18%|#8        | 541/3000 [00:02<00:11, 213.44it/s]Getting ast and token:  19%|#9        | 581/3000 [00:02<00:09, 257.24it/s]Getting ast and token:  21%|##        | 618/3000 [00:02<00:08, 282.74it/s]Getting ast and token:  22%|##1       | 653/3000 [00:02<00:07, 298.46it/s]Getting ast and token:  23%|##2       | 685/3000 [00:02<00:10, 224.13it/s]Getting ast and token:  24%|##3       | 713/3000 [00:02<00:09, 234.83it/s]Getting ast and token:  25%|##4       | 747/3000 [00:02<00:08, 259.24it/s]Getting ast and token:  26%|##5       | 779/3000 [00:03<00:08, 272.52it/s]Getting ast and token:  27%|##7       | 813/3000 [00:03<00:07, 289.67it/s]Getting ast and token:  28%|##8       | 846/3000 [00:03<00:07, 299.22it/s]Getting ast and token:  29%|##9       | 878/3000 [00:03<00:09, 226.21it/s]Getting ast and token:  30%|###       | 911/3000 [00:03<00:08, 248.19it/s]Getting ast and token:  31%|###1      | 941/3000 [00:03<00:07, 260.72it/s]Getting ast and token:  33%|###2      | 977/3000 [00:03<00:07, 279.59it/s]Getting ast and token:  34%|###3      | 1009/3000 [00:03<00:06, 289.23it/s]Getting ast and token:  35%|###4      | 1040/3000 [00:04<00:07, 279.50it/s]Getting ast and token:  36%|###5      | 1071/3000 [00:04<00:06, 287.28it/s]Getting ast and token:  37%|###6      | 1107/3000 [00:04<00:06, 304.58it/s]Getting ast and token:  38%|###7      | 1139/3000 [00:04<00:08, 211.23it/s]Getting ast and token:  39%|###8      | 1166/3000 [00:04<00:08, 223.14it/s]Getting ast and token:  40%|###9      | 1192/3000 [00:04<00:07, 227.19it/s]Getting ast and token:  41%|####      | 1225/3000 [00:04<00:07, 250.49it/s]Getting ast and token:  42%|####1     | 1258/3000 [00:04<00:06, 270.27it/s]Getting ast and token:  43%|####2     | 1287/3000 [00:05<00:06, 273.93it/s]Getting ast and token:  44%|####3     | 1316/3000 [00:05<00:06, 262.40it/s]Getting ast and token:  45%|####4     | 1345/3000 [00:05<00:06, 267.48it/s]Getting ast and token:  46%|####5     | 1373/3000 [00:05<00:09, 177.37it/s]Getting ast and token:  47%|####6     | 1406/3000 [00:05<00:07, 206.70it/s]Getting ast and token:  48%|####8     | 1441/3000 [00:05<00:06, 237.54it/s]Getting ast and token:  49%|####9     | 1472/3000 [00:05<00:06, 254.01it/s]Getting ast and token:  50%|#####     | 1507/3000 [00:05<00:05, 276.52it/s]Getting ast and token:  51%|#####1    | 1538/3000 [00:06<00:05, 282.01it/s]Getting ast and token:  52%|#####2    | 1568/3000 [00:06<00:05, 286.10it/s]Getting ast and token:  54%|#####3    | 1610/3000 [00:06<00:04, 321.01it/s]Getting ast and token:  55%|#####4    | 1645/3000 [00:06<00:04, 326.68it/s]Getting ast and token:  56%|#####6    | 1680/3000 [00:06<00:03, 330.66it/s]Getting ast and token:  57%|#####7    | 1714/3000 [00:06<00:04, 306.86it/s]Getting ast and token:  58%|#####8    | 1746/3000 [00:06<00:07, 174.50it/s]Getting ast and token:  59%|#####9    | 1775/3000 [00:07<00:06, 192.80it/s]Getting ast and token:  60%|######    | 1807/3000 [00:07<00:05, 218.56it/s]Getting ast and token:  61%|######1   | 1841/3000 [00:07<00:04, 243.37it/s]Getting ast and token:  62%|######2   | 1870/3000 [00:07<00:04, 240.29it/s]Getting ast and token:  63%|######3   | 1903/3000 [00:07<00:04, 261.99it/s]Getting ast and token:  64%|######4   | 1932/3000 [00:07<00:04, 255.87it/s]Getting ast and token:  66%|######5   | 1965/3000 [00:07<00:03, 274.97it/s]Getting ast and token:  67%|######6   | 2004/3000 [00:07<00:03, 305.21it/s]Getting ast and token:  68%|######7   | 2036/3000 [00:07<00:03, 300.13it/s]Getting ast and token:  69%|######8   | 2067/3000 [00:08<00:03, 299.42it/s]Getting ast and token:  70%|#######   | 2100/3000 [00:08<00:02, 307.58it/s]Getting ast and token:  71%|#######1  | 2132/3000 [00:08<00:05, 171.40it/s]Getting ast and token:  72%|#######2  | 2160/3000 [00:08<00:04, 190.37it/s]Getting ast and token:  73%|#######2  | 2186/3000 [00:08<00:03, 204.75it/s]Getting ast and token:  74%|#######3  | 2213/3000 [00:08<00:03, 219.60it/s]Getting ast and token:  75%|#######4  | 2242/3000 [00:08<00:03, 236.53it/s]Getting ast and token:  76%|#######5  | 2274/3000 [00:09<00:02, 256.77it/s]Getting ast and token:  77%|#######6  | 2309/3000 [00:09<00:02, 280.57it/s]Getting ast and token:  78%|#######8  | 2340/3000 [00:09<00:02, 288.37it/s]Getting ast and token:  79%|#######9  | 2374/3000 [00:09<00:02, 297.64it/s]Getting ast and token:  80%|########  | 2407/3000 [00:09<00:01, 306.24it/s]Getting ast and token:  81%|########1 | 2439/3000 [00:09<00:02, 271.90it/s]Getting ast and token:  82%|########2 | 2469/3000 [00:09<00:01, 278.91it/s]Getting ast and token:  83%|########3 | 2498/3000 [00:09<00:01, 272.61it/s]Getting ast and token:  84%|########4 | 2526/3000 [00:09<00:01, 264.59it/s]Getting ast and token:  85%|########5 | 2557/3000 [00:10<00:01, 273.22it/s]Getting ast and token:  86%|########6 | 2585/3000 [00:10<00:03, 137.62it/s]Getting ast and token:  87%|########7 | 2613/3000 [00:10<00:02, 158.54it/s]Getting ast and token:  88%|########7 | 2636/3000 [00:10<00:02, 168.14it/s]Getting ast and token:  89%|########8 | 2661/3000 [00:10<00:01, 184.04it/s]Getting ast and token:  89%|########9 | 2684/3000 [00:10<00:01, 179.83it/s]Getting ast and token:  90%|######### | 2711/3000 [00:11<00:01, 200.19it/s]Getting ast and token:  92%|#########1| 2750/3000 [00:11<00:01, 247.20it/s]Getting ast and token:  93%|#########2| 2784/3000 [00:11<00:00, 270.42it/s]Getting ast and token:  94%|#########3| 2814/3000 [00:11<00:00, 273.45it/s]Getting ast and token:  95%|#########4| 2843/3000 [00:11<00:00, 250.66it/s]Getting ast and token:  96%|#########5| 2877/3000 [00:11<00:00, 272.77it/s]Getting ast and token:  97%|#########6| 2907/3000 [00:11<00:00, 279.68it/s]Getting ast and token:  98%|#########7| 2936/3000 [00:11<00:00, 267.29it/s]Getting ast and token:  99%|#########8| 2964/3000 [00:11<00:00, 238.05it/s]Getting ast and token: 100%|#########9| 2991/3000 [00:12<00:00, 244.90it/s]Getting ast and token: 100%|##########| 3000/3000 [00:12<00:00, 247.26it/s][2, 3, 5, 7, 9, 10, 11, 12, 13, 15, 18, 19, 21, 22, 24, 26, 27, 28, 30, 33, 34, 37, 38, 39, 42, 43, 46, 47, 48, 49, 50, 53, 54, 57, 59, 61, 62, 63, 64, 65, 68, 69, 71, 72, 75, 76, 79, 81, 83, 84, 85, 86, 87, 90, 91, 93, 94, 97, 98, 101, 103, 105, 106, 107, 108, 109, 112, 113, 117, 119, 121, 122, 123, 124, 125, 126, 127, 129, 131, 132, 133, 135, 137, 141, 142, 143, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 164, 165, 166, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182]
##########95
95 th code of T:
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46]
[(0, 1), (1, 2), (1, 3), (1, 11), (1, 12), (1, 15), (1, 16), (3, 4), (3, 5), (3, 10), (5, 6), (5, 7), (7, 8), (7, 9), (12, 13), (12, 14), (16, 17), (16, 18), (16, 26), (16, 27), (16, 37), (16, 38), (16, 45), (16, 46), (18, 19), (18, 23), (19, 20), (19, 21), (19, 22), (23, 24), (23, 25), (27, 28), (27, 29), (29, 30), (29, 34), (30, 31), (30, 32), (30, 33), (34, 35), (34, 36), (38, 39), (38, 40), (40, 41), (41, 42), (41, 43), (41, 44)]
95 th code of sast T:
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46]
[(0, 1), (1, 2), (1, 3), (1, 11), (1, 12), (1, 15), (1, 16), (2, 4), (3, 4), (3, 5), (3, 10), (4, 6), (5, 6), (5, 7), (6, 8), (6, 20), (7, 8), (7, 9), (8, 9), (9, 10), (10, 11), (11, 13), (12, 13), (12, 14), (13, 14), (14, 15), (15, 17), (16, 17), (16, 18), (16, 26), (16, 27), (16, 37), (16, 38), (16, 45), (16, 46), (17, 20), (18, 19), (18, 23), (19, 20), (19, 21), (19, 22), (20, 21), (20, 31), (21, 22), (22, 24), (23, 24), (23, 25), (24, 25), (25, 26), (26, 28), (27, 28), (27, 29), (28, 31), (29, 30), (29, 34), (30, 31), (30, 32), (30, 33), (31, 32), (31, 42), (32, 33), (33, 35), (34, 35), (34, 36), (35, 36), (36, 37), (37, 39), (38, 39), (38, 40), (39, 42), (40, 41), (41, 42), (41, 43), (41, 44), (42, 43), (43, 44), (44, 45), (45, 46)]
raw_code:  func (c *Cache) Size() int64 {
	c.Lock()
	defer c.Unlock()
	return c.size
}
leaves:  [2, 4, 6, 8, 9, 10, 11, 13, 14, 15, 17, 20, 21, 22, 24, 25, 26, 28, 31, 32, 33, 35, 36, 37, 39, 42, 43, 44, 45, 46]
example length: 3000
ast list length 3000
tokens list length 3000
tokens 348: 
{2: 'func', 4: '(', 6: 'in', 8: '*', 9: 'VolumeSnapshotCondition', 10: ')', 11: 'DeepCopy', 13: '(', 14: ')', 16: '*', 17: 'VolumeSnapshotCondition', 19: '{', 21: 'if', 23: 'in', 24: '==', 25: 'nil', 27: '{', 29: 'return', 31: 'nil', 32: '', 33: '}', 34: '', 37: 'out', 38: ':=', 41: 'new', 43: '(', 44: 'VolumeSnapshotCondition', 45: ')', 46: '', 49: 'in', 50: '.', 51: 'DeepCopyInto', 53: '(', 54: 'out', 55: ')', 56: '', 58: 'return', 60: 'out', 61: '', 62: '}'}
tokens type 348: 
{2: 'func', 4: '(', 6: 'identifier', 8: '*', 9: 'type_identifier', 10: ')', 11: 'field_identifier', 13: '(', 14: ')', 16: '*', 17: 'type_identifier', 19: '{', 21: 'if', 23: 'identifier', 24: '==', 25: 'nil', 27: '{', 29: 'return', 31: 'nil', 32: '\n', 33: '}', 34: '\n', 37: 'identifier', 38: ':=', 41: 'identifier', 43: '(', 44: 'type_identifier', 45: ')', 46: '\n', 49: 'identifier', 50: '.', 51: 'field_identifier', 53: '(', 54: 'identifier', 55: ')', 56: '\n', 58: 'return', 60: 'identifier', 61: '\n', 62: '}'}
tokens 0: 

06/25/2022 03:00:41 - INFO - __main__ -   Obtain subtokens
{2: 'func', 3: 'DurationString', 5: '(', 7: 'd', 9: 'time', 10: '.', 11: 'Duration', 12: ')', 13: 'string', 15: '{', 18: 'sign', 19: ':=', 21: '1', 22: '', 24: 'if', 26: 'd', 27: '<', 28: '0', 30: '{', 33: 'sign', 34: '=', 37: '-', 38: '1', 39: '', 42: 'd', 43: '=', 46: '-', 47: 'd', 48: '', 49: '}', 50: '', 53: 'ns', 54: ':=', 57: 'int', 59: '(', 61: 'd', 62: '%', 63: '1e9', 64: ')', 65: '', 68: 'd', 69: '/=', 71: '1e9', 72: '', 75: 'sec', 76: ':=', 79: 'int', 81: '(', 83: 'd', 84: '%', 85: '60', 86: ')', 87: '', 90: 'd', 91: '/=', 93: '60', 94: '', 97: 'min', 98: ':=', 101: 'int', 103: '(', 105: 'd', 106: '%', 107: '60', 108: ')', 109: '', 112: 'hour', 113: ':=', 117: 'int', 119: '(', 121: 'd', 122: '/', 123: '60', 124: ')', 125: '*', 126: 'sign', 127: '', 129: 'if', 131: 'ns', 132: '==', 133: '0', 135: '{', 137: 'return', 141: 'fmt', 142: '.', 143: 'Sprintf', 145: '(', 147: '"', 148: '"', 149: ',', 150: 'hour', 151: ',', 152: 'min', 153: ',', 154: 'sec', 155: ')', 156: '', 157: '}', 158: '', 160: 'return', 164: 'fmt', 165: '.', 166: 'Sprintf', 168: '(', 170: '"', 171: '"', 172: ',', 173: 'hour', 174: ',', 175: 'min', 176: ',', 177: 'sec', 178: ',', 179: 'ns', 180: ')', 181: '', 182: '}'}
tokens type 0: 
{2: 'func', 3: 'identifier', 5: '(', 7: 'identifier', 9: 'package_identifier', 10: '.', 11: 'type_identifier', 12: ')', 13: 'type_identifier', 15: '{', 18: 'identifier', 19: ':=', 21: 'int_literal', 22: '\n', 24: 'if', 26: 'identifier', 27: '<', 28: 'int_literal', 30: '{', 33: 'identifier', 34: '=', 37: '-', 38: 'int_literal', 39: '\n', 42: 'identifier', 43: '=', 46: '-', 47: 'identifier', 48: '\n', 49: '}', 50: '\n', 53: 'identifier', 54: ':=', 57: 'identifier', 59: '(', 61: 'identifier', 62: '%', 63: 'float_literal', 64: ')', 65: '\n', 68: 'identifier', 69: '/=', 71: 'float_literal', 72: '\n', 75: 'identifier', 76: ':=', 79: 'identifier', 81: '(', 83: 'identifier', 84: '%', 85: 'int_literal', 86: ')', 87: '\n', 90: 'identifier', 91: '/=', 93: 'int_literal', 94: '\n', 97: 'identifier', 98: ':=', 101: 'identifier', 103: '(', 105: 'identifier', 106: '%', 107: 'int_literal', 108: ')', 109: '\n', 112: 'identifier', 113: ':=', 117: 'identifier', 119: '(', 121: 'identifier', 122: '/', 123: 'int_literal', 124: ')', 125: '*', 126: 'identifier', 127: '\n', 129: 'if', 131: 'identifier', 132: '==', 133: 'int_literal', 135: '{', 137: 'return', 141: 'identifier', 142: '.', 143: 'field_identifier', 145: '(', 147: '"', 148: '"', 149: ',', 150: 'identifier', 151: ',', 152: 'identifier', 153: ',', 154: 'identifier', 155: ')', 156: '\n', 157: '}', 158: '\n', 160: 'return', 164: 'identifier', 165: '.', 166: 'field_identifier', 168: '(', 170: '"', 171: '"', 172: ',', 173: 'identifier', 174: ',', 175: 'identifier', 176: ',', 177: 'identifier', 178: ',', 179: 'identifier', 180: ')', 181: '\n', 182: '}'}
Computing subtokens:   0%|          | 0/30 [00:00<?, ?it/s]Computing subtokens:   3%|3         | 1/30 [00:00<00:26,  1.11it/s]Computing subtokens:   7%|6         | 2/30 [00:01<00:18,  1.50it/s]Computing subtokens:  10%|#         | 3/30 [00:01<00:16,  1.65it/s]Computing subtokens:  13%|#3        | 4/30 [00:02<00:14,  1.74it/s]